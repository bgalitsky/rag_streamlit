import os
import streamlit as st
import os
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.chains import RetrievalQA
from langchain.llms import GigaChat
from PyPDF2 import PdfReader
from docx import Document as DocxDocument
from langchain_huggingface import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
from langchain_gigachat.chat_models import GigaChat
from dotenv import load_dotenv
load_dotenv()
api_key = os.getenv("GIGACHAT_API_KEY")

# Sample questions (edit to match your documents!)
SAMPLE_QUESTIONS = [
    "–ö–∞–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—É—à–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ?",
    "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å–µ: –∑–∞–º–æ—Ä–æ–∑–∫–∏ —É–≥—Ä–æ–∂–∞—é—Ç –ø–æ—Ç–µ—Ä–µ–π –¥–æ 50% —É—Ä–æ–∂–∞—è —á–µ–≥–æ?",
    "–í –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –±—ã–ª–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∏?",
    "–¢–µ–ø–ª–æ–≤—ã–µ –ø—É—à–∫–∏ –≤ –ø–∞—Ä–Ω–∏–∫–∞—Ö - –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
    "–ù–∞ —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –Ω–æ—á—å—é —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø–∞—Ä–Ω–∏–∫–∞—Ö?",
    "–í –æ—Ä–∞–Ω–∂–µ—Ä–µ—è—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ç–æ–∫ —á—Ç–æ –¥–µ–ª–∞–µ—Ç?",
    "–ö—É–¥–∞ –≤–æ–∑–¥—É—à–Ω–∞—è —Å—Ç—Ä—É—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞? "
]

@st.cache_resource
# –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
def load_documents_from_directory(directory):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: .txt, .pdf, .docx.

    :param directory: –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    :return: —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    documents = []
    for filename in os.listdir(directory):
        filepath = os.path.join(directory, filename)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (.txt)
        if filename.endswith(".txt"):
            with open(filepath, "r", encoding="utf-8") as file:
                documents.append(file.read())

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤ (.pdf)
        elif filename.endswith(".pdf"):
            reader = PdfReader(filepath)
            text = ""
            for page in reader.pages:
                text += page.extract_text()
            documents.append(text)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ DOCX —Ñ–∞–π–ª–æ–≤ (.docx)
        elif filename.endswith(".docx"):
            doc = DocxDocument(filepath)
            text = "\n".join([paragraph.text for paragraph in doc.paragraphs])
            documents.append(text)

    return documents


# –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def create_vector_store(documents):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é FAISS.

    :param documents: —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    :return: –æ–±—ä–µ–∫—Ç FAISS –¥–ª—è –ø–æ–∏—Å–∫–∞
    """
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    vector_store = FAISS.from_texts(documents, embeddings)
    return vector_store


# 4. Setup RAG pipeline
def create_qa_chain(vector_store):
    retriever = vector_store.as_retriever(search_kwargs={"k": 4})
    giga = GigaChat(
        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ø—Ä–æ–µ–∫—Ç–µ GigaChat API
        credentials=api_key,
        verify_ssl_certs=False,
    )
    qa_chain = RetrievalQA.from_chain_type(llm=giga, retriever=retriever, return_source_documents=True)
    return qa_chain

def ask_question(qa_chain, question):
    result = qa_chain({"query": question})
    return result["result"]

# Streamlit UI
st.set_page_config(page_title="–ó–∞–º–æ—Ä–æ–∑–∫–∏ –≤ –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–æ–º –∫—Ä–∞–µ", layout="centered")
st.markdown(
    """
    <style>
    .chat-container {
        max-height: 500px;
        overflow-y: auto;
        padding: 1rem;
        background-color: #f7f7f7;
        border-radius: 1rem;
        margin-bottom: 1rem;
    }
    .chat-bubble {
        max-width: 80%;
        padding: 0.75rem 1rem;
        margin: 0.5rem 0;
        border-radius: 1rem;
        font-size: 1rem;
        line-height: 1.4;
    }
    .user {
        background-color: #dcf8c6;
        align-self: flex-end;
        margin-left: auto;
    }
    .bot {
        background-color: #ffffff;
        border: 1px solid #e1e1e1;
        align-self: flex-start;
        margin-right: auto;
    }
    </style>
    """,
    unsafe_allow_html=True
)


st.title("ü§ñ–ó–∞–º–æ—Ä–æ–∑–∫–∏ –≤ –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–æ–º –∫—Ä–∞–µ")
# File path setup (edit your folder path here)
DOCS_PATH = "resources"

with st.spinner("Loading documents and building vector store..."):
    docs = load_documents_from_directory(DOCS_PATH)
    vector_store = create_vector_store(docs)
    qa_chain = create_qa_chain(vector_store)

# Chat interface
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

#user_input = st.text_input("–í–∞—à –≤–æ–ø—Ä–æ—Å", placeholder="Ask me anything from the docs...")

# Sample Questions UI
st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
cols = st.columns(2)
for i, question in enumerate(SAMPLE_QUESTIONS):
    if cols[i % 2].button(question):
        st.session_state.selected_question = question

# Chat input field
user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å...")

# Use selected sample if available
if "selected_question" in st.session_state:
    user_input = st.session_state.selected_question
    del st.session_state.selected_question

if user_input:
    with st.spinner("Searching and generating answer..."):
        answer = ask_question(qa_chain, user_input)
        st.session_state.chat_history.append(("user", user_input))
        st.session_state.chat_history.append(("bot", answer))

# Display chat history
st.markdown('<div class="chat-container">', unsafe_allow_html=True)
for role, message in st.session_state.chat_history:
    css_class = "user" if role == "user" else "bot"
    st.markdown(f'<div class="chat-bubble {css_class}">{message}</div>', unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)